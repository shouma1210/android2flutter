{% raw %}
import 'package:flutter/material.dart';

{# ===============================
   オプションの既定値（Jinja 側）
   =============================== #}
{% set is_stateful      = options.is_stateful      | default(false) %}
{% set use_scrollview   = options.use_scrollview   | default(true)  %}
{% set use_safearea     = options.use_safearea     | default(false) %}
{% set add_appbar       = options.add_appbar       | default(true)  %}
{% set appbar_title     = options.appbar_title     | default(class_name) %}
{% set use_scaffold     = options.use_scaffold     | default(true)  %}
{% set keyboard_dismiss = options.keyboard_dismiss | default(true)  %}
{% set page_padding     = options.page_padding     | default(16.0)   %}
{% set stretch          = options.stretch          | default(true)  %}

class {{ class_name }} extends {% if is_stateful %}StatefulWidget{% else %}StatelessWidget{% endif %} {
  const {{ class_name }}({super.key});

  {% if is_stateful %}
  @override
  State<{{ class_name }}> createState() => _{{ class_name }}State();
}

class _{{ class_name }}State extends State<{{ class_name }}> {
  {# ---- Controller部分を自動生成（必要数だけ） ---- #}
  {% for c in controllers %}
  final TextEditingController {{ c }} = TextEditingController();
  {% endfor %}

  @override
  void dispose() {
    {% for c in controllers %}
    {{ c }}.dispose();
    {% endfor %}
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    Widget content = {{ widget_tree }};

    {# ---- 余白（画面外側） ---- #}
    if ({{ page_padding }} > 0) {
      content = Padding(
        padding: const EdgeInsets.all({{ page_padding }}),
        child: content,
      );
    }

    {# ---- ScrollView ラップ（必要時のみ） ---- #}
    {% if use_scrollview %}
    content = LayoutBuilder(
      builder: (context, constraints) {
        return SingleChildScrollView(
          child: ConstrainedBox(
            constraints: BoxConstraints(
              minWidth: double.infinity,
              {# 画面一杯に広がっても塗り潰しにならないよう minHeight = viewport #}
              minHeight: constraints.maxHeight,
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: {{ 'CrossAxisAlignment.stretch' if stretch else 'CrossAxisAlignment.start' }},
              children: [content],
            ),
          ),
        );
      },
    );
    {% endif %}

    {# ---- キーボードで隠れにくくする＋外タップでDismiss ---- #}
    if ({{ keyboard_dismiss }}) {
      content = GestureDetector(
        behavior: HitTestBehavior.translucent,
        onTap: () => FocusScope.of(context).unfocus(),
        child: content,
      );
    }

    {# ---- SafeArea ---- #}
    {% if use_safearea %}
    content = SafeArea(child: content);
    {% endif %}

    {# ---- Scaffold で包む（基本推奨） ---- #}
    {% if use_scaffold %}
    return Scaffold(
      {% if add_appbar %}appBar: AppBar(title: Text('{{ appbar_title }}')), {% endif %}
      body: Padding(
        {# ソフトキーボード分の下余白。スクロール無し画面でも被りにくい #}
        padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
        child: content,
      ),
    );
    {% else %}
    return content;
    {% endif %}
  }

  // ===== Auto-Generated Handlers (State Internal) =====
  {{ handlers_code|default('// no handlers') }}
}
  {% else %} {# ------------ Stateless 版 ------------ #}
  @override
  Widget build(BuildContext context) {
    Widget content = {{ widget_tree }};

    if ({{ page_padding }} > 0) {
      content = Padding(
        padding: const EdgeInsets.all({{ page_padding }}),
        child: content,
      );
    }

    {% if use_scrollview %}
    content = LayoutBuilder(
      builder: (context, constraints) {
        return SingleChildScrollView(
          child: ConstrainedBox(
            constraints: BoxConstraints(
              minWidth: double.infinity,
              minHeight: constraints.maxHeight,
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: {{ 'CrossAxisAlignment.stretch' if stretch else 'CrossAxisAlignment.start' }},
              children: [content],
            ),
          ),
        );
      },
    );
    {% endif %}

    {% if keyboard_dismiss %}
    content = GestureDetector(
      behavior: HitTestBehavior.translucent,
      onTap: () => FocusScope.of(context).unfocus(),
      child: content,
    );
    {% endif %}

    {% if use_safearea %}
    content = SafeArea(child: content);
    {% endif %}

    {% if use_scaffold %}
    return Scaffold(
      {% if add_appbar %}appBar: AppBar(title: Text('{{ appbar_title }}')), {% endif %}
      body: Padding(
        padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
        child: content,
      ),
    );
    {% else %}
    return content;
    {% endif %}
  }

  // ===== Auto-Generated Handlers =====
  {{ handlers_code|default('// no handlers') }}
}
{% endif %}
{% endraw %}
